#! /usr/bin/env bash

#=========================================================================#
#                                   ark                                   #
#                                                                         #
# Author: nic                                                             #
# Date: 2017-Jun-19                                                       #
#                                                                         #
# The archiving utility. Compresses folders into a checksummed archive,   #
# or uncompresses and checks archives into a folder. By default, the zip  #
# format is used (for portability reasons).                               #
#                                                                         #
# Usage:                                                                  #
#   ark [Options] <archive/directory>                                     #
#                                                                         #
# Options:                                                                #
#   -d <server>  deploy the archive via scp to <server>                   #
#   -f           fast mode, do not create or verify checksums             #
#   -g           Use .tgz format                                          #
#   -h           print this help message                                  #
#   -j           Use .tar.bz2 format                                      #
#   -l           just list contents, do not uncompress                    #
#   -n <name>    Override the default name with <name>                    #
#   -z           Use .zip format                                          #
#=========================================================================#

set -e
set -u

function usage(){
    grep "^#.*#$" $0
}

function errxit(){
    [ $# -gt 0 ] && echo "Error: $@" >&2
    echo "Re-run with -h for help" >&2
    exit 1
}

ARCHIVING="false"
FORMAT=""
LIST="false"
NAME=""
while getopts "d:fghjln:z" opt; do
    case $opt in
        d)
            errxit deploy not implemented
            ;;
        f)
            errxit fast not implemented
            ;;
        g)
            FORMAT="gz"
            ;;
        h)
            usage
            exit 0
            ;;
        j)
            FORMAT="bz"
            ;;
        l)
            LIST="true"
            ;;
        n)
            NAME="$OPTARG"
            ;;
        z)
            FORMAT="zip"
            ;;
        \?)
            errxit Unrecognised command
            ;;
    esac
done
shift $(($OPTIND -1))

#========================#
# work out the format/op #
#========================#
if [ $# != 1 ]; then
    errxit please specify one archive/directory
elif [ -d "$1" ]; then
    ARCHIVING="true"
    [ -z "$FORMAT" ] && FORMAT="zip"
elif [ ! -f "$1" ]; then
    errxit "\"$1\" does not exist or is not a plain file"
elif [[ "$1" == *.zip ]]; then
    FORMAT="zip"
elif [[ "$1" == *.tar.gz ]] || [[ "$1" == *.tgz ]]; then
    FORMAT="gz"
elif [[ "$1" == *.tar.* ]]; then
    FORMAT="bz"
    [[ "$1" == *.tar.bz2 ]] || echo "Warning, tar archive \"$1\" treated as bz2"  >&2
fi
[ -z "$FORMAT" ] && errxit "Unknown archive format for \"$1\""

#===================#
# creating archives #
#===================#
if [ "$ARCHIVING" == "true" ]; then
    [ "$LIST" == "true" ] && ls "$1" && exit 0
    [ -z "$NAME" ] && NAME=`basename $1`
    # make a checksum file
    # TODO make the liwest level dir (i.e. basename and dirname)
    trap "rm \"$1/CHECKSUM\"" EXIT
    pushd "$1"
    rm -f ./CHECKSUM
    checksummarize . > /dev/null
    popd
    case $FORMAT in
        zip)
            TFILE=`mktemp "${NAME}_XXX.zip"`
            RFILE="$NAME.zip"
            zip -r - "$1" > "$TFILE"
            ;;
        gz)
            TFILE=`mktemp "${NAME}_XXX.tgz"`
            RFILE="$NAME.tgz"
            tar -czv "$1" > "$TFILE"
            ;;
        bz)
            TFILE=`mktemp "${NAME}_XXX.tar.bz2"`
            RFILE="$NAME.tar.bz2"
            tar -cjv "$1" > "$TFILE"
            ;;
    esac
    if [ ! -e "$RFILE" ]; then
        mv "$TFILE" "$RFILE"
    fi

#=====================#
# extracting archives #
#=====================#
else
    BNAME=`basename "$1"`
    case $FORMAT in
        zip)
            [ -z "$NAME" ] && NAME="${BNAME%.zip}"
            BEFORE="unzip"
            AFTER="-d"
            LST="unzip -l"
            ;;
        gz)
            if [ -z "$NAME" ]; then
                NAME="${BNAME%.tgz}"
                NAME="${NAME%.tar.gz}"
            fi
            BEFORE="tar -xvf"
            AFTER="-C"
            LST="tar -tf"
            ;;
        bz)
            [ -z "$NAME" ] && NAME="${BNAME%.tar.*}"
            BEFORE="tar -xvf"
            AFTER="-C"
            LST="tar -tf"
            ;;
    esac
    [ "$LIST" == "true" ] && $LST $1 && exit 0
    OUT=`mktemp -d`
    trap "rm -rf $OUT" EXIT
    $BEFORE "$1" $AFTER "$OUT"
    if [ `ls -A "$OUT" | wc -l` == 1 ] && [ -d "$OUT/"* ]; then
        OUT=`readlink -f "$OUT/"*`
    fi
    #TODO checksum
    if [ -e "$NAME" ]; then
        FINAL=`mktemp -d ${NAME}_XXX`
        echo "\"$NAME\" already exists, extracting to \"$FINAL\""
        NAME="$FINAL"
    fi
    mv -T "$OUT" "$NAME"
fi
